openapi: 3.1.0
info:
  title: Libreria API definition
  version: v1

servers:
- url: http://localhost:8080
  description: base server url

tags:
- name: Category
  description: Category management APIs
- name: Loan
  description: Loan management APIs
- name: Student
  description: Student management APIs
- name: Course
  description: Course management APIs
- name: Book
  description: Book management APIs
- name: Card
  description: Card management APIs

paths:
  /api/v1/card:
    get:
      tags:
      - get-all
      - Card
      summary: Retrieve all cards
      description: Retrieve all card objects. The response is a list of card objects.
      operationId: getAllTessere
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/AscParam'
        - $ref: '#/components/parameters/SortByParam'
      responses:
        "200":
          description: Retrieved all cards
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageCard"
    put:
      tags:
      - put
      - Card
      summary: Modify card
      description: Modify a card object by specifying its id
      operationId: editCard
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Card"
        required: true
      responses:
        "200":
          description: Card modified
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Card"
        "400":
          description: Id type mismatch
        "404":
          description: Card not found
        "409":
          description: Data integrity violation
    post:
      tags:
      - post
      - Card
      summary: Add card
      description: Add a card object to the database
      operationId: addCard
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Card"
        required: true
      responses:
        "200":
          description: Card added to the database
        "409":
          description: Data integrity violation

  /api/v1/card/{id}:
    get:
      tags:
        - get
        - Card
      summary: Retrieve card by id
      description: Retrieve a card object by specifying its id. The response is a
        card object
      operationId: getCardById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Found the card
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Card"
        "400":
          description: Id type mismatch
        "404":
          description: Card not found
    delete:
      tags:
        - delete
        - Card
      summary: Delete by id
      description: Delete a card object by specifying its id
      operationId: removeCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Card deleted
        "400":
          description: Id type mismatch
        "404":
          description: card not found
        "409":
          description: Data integrity violation


  /api/v1/student:
    get:
      tags:
      - get-all
      - Student
      summary: Retrieve all students
      description: Retrieve all student objects. The response is a list of student
        objects
      operationId: getAll
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/AscParam'
        - $ref: '#/components/parameters/SortByParam'
      responses:
        "200":
          description: Retrieved all student
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageStudent"
    put:
      tags:
      - Student
      - put
      summary: Modify student
      description: Modify a student object by specifying its id
      operationId: editStudent
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Student"
        required: true
      responses:
        "200":
          description: Student modified
        "400":
          description: Id type mismatch
        "404":
          description: Student not found
        "409":
          description: Data integrity violation
    post:
      tags:
      - post
      - Student
      summary: Add student
      description: Add a student object to the database
      operationId: addStudent
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Student"
        required: true
      responses:
        "200":
          description: Student added to the database
        "409":
          description: Data integrity violation

  /api/v1/student/{id}:
    get:
      tags:
        - get
        - Student
      summary: Retrieve student by id
      description: Retrieve a student object by specifying its id. The response is
        a student object
      operationId: getstudentById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Student found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Student"
        "400":
          description: Id type mismatch
        "404":
          description: Student not found
    delete:
      tags:
        - Student
        - delete
      summary: Delete student by id
      description: Delete a student object by specifying its id
      operationId: deleteStudent
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Student deleted
        "400":
          description: Id type mismatch
        "404":
          description: Student not found
        "409":
          description: Data integrity violation

  /api/v1/student/without-loan:
    get:
      tags:
        - get-all
        - Student
      summary: Retrieve students without loans
      description: Retrieve a list of student objects without loans
      operationId: getStudentWithoutLoan
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/AscParam'
        - $ref: '#/components/parameters/SortByParam'
      responses:
        "200":
          description: Student found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageStudent"

  /api/v1/student/by-class:
    get:
      tags:
        - get-all
        - Student
      summary: Retrieve students by class
      description: Retrieve a list of student objects by specifying a class
      operationId: getStudentByClass
      parameters:
        - name: schoolClass
          in: query
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/AscParam'
        - $ref: '#/components/parameters/SortByParam'
      responses:
        "200":
          description: Student found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageStudent"

  /api/v1/student/by-card-release:
    get:
      tags:
        - get-all
        - Student
      summary: Retrieve students by card release date
      description: Retrieve a list of student objects by specifying a card release date
      operationId: getStudentByCardRelease
      parameters:
        - name: start
          in: query
          required: false
          schema:
            type: string
            format: date
        - name: end
          in: query
          required: false
          schema:
            type: string
            format: date
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/AscParam'
        - $ref: '#/components/parameters/SortByParam'
      responses:
        "200":
          description: Student found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageStudent"

  /api/v1/student/min-loan:
    get:
      tags:
        - get-all
        - Student
      summary: Retrieve students with more loans then specified
      description: Retrieve a list of student objects by specifying a minimum number of loans
      operationId: getStudentByMinLoan
      parameters:
        - name: minLoan
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/AscParam'
        - $ref: '#/components/parameters/SortByParam'
      responses:
        "200":
          description: Student found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageNameSurnameLoansDTO"

  /api/v1/student/by-category-name:
    get:
      tags:
        - get-all
        - Student
      summary: Retrieve students by specifying a category
      description: Retrieve a list of student objects by specifying a category
      operationId: getStudentByCategoryName
      parameters:
        - name: categoryName
          in: query
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/AscParam'
        - $ref: '#/components/parameters/SortByParam'
      responses:
        "200":
          description: Student found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageStudent"

  /api/v1/student/by-loan-count:
    get:
      tags:
        - get
        - Student
      summary: Retrieve students ordered by number of loans
      description: Retrieve a list of student objects ordered by number of loans
      operationId: getStudentByLoanCount
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/AscParam'
        - $ref: '#/components/parameters/SortByParam'
      responses:
        "200":
          description: Student found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageStudent"

  /api/v1/student/loan-book:
    post:
      tags:
        - Student
        - Post
      summary: Loan book
      description: Loan a book if it isn't already lent
      operationId: loanBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdStudentBookDTO"
      responses:
        "200":
          description: Book lent
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Loan"
        "400":
          description: Book already lent
        "404":
          description: Entity not found

  /api/v1/student/return-book:
    post:
      tags:
        - Student
        - Post
      summary: Return book
      description: Return a book if it is already lent
      operationId: returnBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/IdStudentBookDTO"
      responses:
        "200":
          description: Book returned
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Loan"
        "404":
          description: Entity not found

  /api/v1/student/stats:
    get:
      tags:
        - get
        - Student
      summary: Retrieve stats for given student
      description: "Retrieve stats for given student: number of loans, number of ongoing loans, last loan date and favourite category"
      operationId: getStudentStats
      parameters:
        - name: idStudent
          in: query
          required: true
          schema:
            type: integer
      responses:
        "200":
          description: Student found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/StudentStatsDTO"
        "400":
          description: id type mismatch
        "404":
          description: entity not found

  /api/v1/student/suggestions:
    get:
      tags:
        - get-all
        - Student
      summary: Retrieve books based on stats
      description: Retrieve a list of books related to student stats
      operationId: getSuggestions
      parameters:
        - name: idStudent
          in: query
          required: true
          schema:
            type: integer
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/AscParam'
        - $ref: '#/components/parameters/SortByParam'
      responses:
        "200":
          description: Student found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageBook"
        "400":
          description: id type mismatch
        "404":
          description: entity not found

  /api/v1/loan:
    get:
      tags:
      - Loan
      - get-all
      summary: Retrieve all loans
      description: Retrieve all Loan objects. The response is a list of Loan objects
      operationId: getAll_1
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/AscParam'
        - $ref: '#/components/parameters/SortByParam'
      responses:
        "200":
          description: Retrieved all Loans
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageLoan"
    put:
      tags:
      - Loan
      - put
      summary: Modify Loan
      description: Modify a Loan object by specifying its id
      operationId: editLoan
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Loan"
        required: true
      responses:
        "400":
          description: Id type mismatch
        "404":
          description: Loan not found
        "409":
          description: Data integrity violation
    post:
      tags:
      - post
      - Loan
      summary: Add Loan
      description: Add a Loan object to the database
      operationId: addLoan
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Loan"
        required: true
      responses:
        "200":
          description: Loan added to the database
        "409":
          description: Data integrity violation

  /api/v1/loan/{id}:
    get:
      tags:
        - Loan
        - get
      summary: Retrieve Loan by id
      description: Retrieve a Loan object by specifying its id. The response is a
        Loan object
      operationId: getLoanById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Loan found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Loan"
        "400":
          description: Id type mismatch
        "404":
          description: Loan not found
    delete:
      tags:
        - Loan
        - delete
      summary: Delete Loan by id
      description: Delete a Loan object by specifying its id
      operationId: deleteLoan
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Loan deleted
        "400":
          description: Id type mismatch
        "404":
          description: Loan not found
        "409":
          description: Data integrity violation

  /api/v1/loan/ongoing:
    get:
      tags:
        - Loan
        - get-all
      summary: Retrieve all ongoing loans
      description: Retrieve all ongoing Loan objects. The response is a list of Loan objects with null endDate
      operationId: getOngoing
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/AscParam'
        - $ref: '#/components/parameters/SortByParam'
      responses:
        "200":
          description: Retrieved all ongoing Loans
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageLoan"


  /api/v1/book:
    get:
      tags:
      - Book
      - get-all
      summary: Retrieve all books
      description: Retrieve all Book objects. The response is a list of Book objects
      operationId: getAll_2
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/AscParam'
        - $ref: '#/components/parameters/SortByParam'
      responses:
        "200":
          description: Retrieved all Book
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
    put:
      tags:
      - Book
      - put
      summary: Modify Book
      description: Modify a Book object by specifying its id
      operationId: 
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
        required: true
      responses:
        "200":
          description: Book modified
        "400":
          description: Id type mismatch
        "404":
          description: Book not found
        "409":
          description: Data integrity violation
    post:
      tags:
      - post
      - Book
      summary: Add Book
      description: Add a Book object to the database
      operationId: addBook
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Book"
        required: true
      responses:
        "200":
          description: Book added to the database
        "409":
          description: Data integrity violation

  /api/v1/book/{id}:
    get:
      tags:
        - Book
        - get
      summary: Retrieve Book by id
      description: Retrieve a Book object by specifying its id. The response is a
        Book object
      operationId: getBookById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Book found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          description: Id type mismatch
        "404":
          description: Book not found
    delete:
      tags:
        - Book
        - delete
      summary: Delete Book by id
      description: Delete a Book object by specifying its id
      operationId: deleteBook
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Book deleted
        "400":
          description: Id type mismatch
        "404":
          description: Book not found
        "409":
          description: Data integrity violation

  /api/v1/book/by-year-greater-than:
    get:
      tags:
        - get-all
        - Book
      summary: Retrieve books by specifying a publish year.
      description: Retrieve a list of book objects published after the specified year
      operationId: getByPublishYearGreaterThan
      parameters:
        - name: year
          in: query
          required: true
          schema:
            type: integer
            format: int64
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/AscParam'
        - $ref: '#/components/parameters/SortByParam'
      responses:
        "200":
          description: Book found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageBook"
        "400":
          description: id type mismatch

  /api/v1/book/by-category-name:
    get:
      tags:
        - get-all
        - Book
      summary: Retrieve books by specifying a category.
      description: Retrieve a list of book objects belonging to a category.
      operationId: getByCategoryName
      parameters:
        - name: name
          in: query
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/AscParam'
        - $ref: '#/components/parameters/SortByParam'
      responses:
        "200":
          description: Book found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageBook"
        "400":
          description: id type mismatch

  /api/v1/book/without-loan:
    get:
      tags:
        - get-all
        - Book
      summary: Retrieve non-borrowed books.
      description: Retrieve a list of non-borrowed book objects
      operationId: getWithoutLoan
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/AscParam'
        - $ref: '#/components/parameters/SortByParam'
      responses:
        "200":
          description: Book found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageBook"

  /api/v1/book/loan-interval:
    get:
      tags:
        - get-all
        - Book
      summary: Retrieve books by specifying a loan start date
      description: Retrieve a list of book objects lent after the specified date
      operationId: getByLoanInterval
      parameters:
        - name: start
          in: query
          required: true
          schema:
            type: string
            format: date
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/AscParam'
        - $ref: '#/components/parameters/SortByParam'
      responses:
        "200":
          description: Book found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageBook"
        "400":
          description: id type mismatch

  /api/v1/book/loan-above-avg:
    get:
      tags:
        - get-all
        - Book
      summary: Retrieve books with above average number of loans.
      description: Retrieve a list of book objects with above average number of loans
      operationId: getByLoanAboveAvg
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/AscParam'
        - $ref: '#/components/parameters/SortByParam'
      responses:
        "200":
          description: Book found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageBook"

  /api/v1/course:
    get:
      tags:
      - get-all
      - Course
      summary: Retrieve all courses
      description: Retrieve all Course objects. The response is a list of Course objects
      operationId: getAll_3
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/AscParam'
        - $ref: '#/components/parameters/SortByParam'
      responses:
        "200":
          description: Retrieved all Course
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageCourse"
    put:
      tags:
      - Course
      - put
      summary: Modify Course
      description: Modify a Course object by specifying its id
      operationId: editCourse
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Course"
        required: true
      responses:
        "200":
          description: Course modified
        "400":
          description: Id type mismatch
        "404":
          description: Course not found
        "409":
          description: Data integrity violation
    post:
      tags:
      - post
      - Course
      summary: Add Course
      description: Add a Course object to the database
      operationId: addCourse
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Course"
        required: true
      responses:
        "200":
          description: Course added to the database
        "409":
          description: Data integrity violation

  /api/v1/course/{id}:
    get:
      tags:
        - get
        - Course
      summary: Retrieve Course by id
      description: Retrieve a Course object by specifying its id. The response is
        a Course object
      operationId: getCourseById
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Course found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course"
        "400":
          description: Id type mismatch
        "404":
          description: Course not found
    delete:
      tags:
        - Course
        - delete
      summary: Delete Course by id
      description: Delete a Course object by specifying its id
      operationId: deleteCourse
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: Course deleted
        "400":
          description: Id type mismatch
        "404":
          description: Course not found
        "409":
          description: Data integrity violation


  /api/v1/category:
    get:
      tags:
      - Category
      - get-all
      summary: Retrieve all categories
      description: Retrieve all Category objects. The response is a list of Category objects
        objects
      operationId: getAllCategories
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/AscParam'
        - $ref: '#/components/parameters/SortByParam'
      responses:
        "200":
          description: Retrieved all Category
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageCategory"
    put:
      tags:
      - Category
      - put
      summary: Edit Category
      description: Edit a Category object by specifying its id
      operationId: editCategory
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
        required: true
      responses:
        "200":
          description: Category modified
        "400":
          description: Id type mismatch
        "404":
          description: Category not found
        "409":
          description: Data integrity violation
    post:
      tags:
      - Category
      - post
      summary: Add Category
      description: Add a Category object to the database
      operationId: addCategory
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
        required: true
      responses:
        "200":
          description: Category added to the database
        "409":
          description: Data integrity violation

  /api/v1/category/{id}:
    get:
      tags:
      - Category
      - get
      summary: Retrieve Category by id
      description: Retrieve a Category object by specifying its id. The response is a Category object
      operationId: getCategoryById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Category found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Category"
        "400":
          description: Id type mismatch
        "404":
          description: Category not found
    delete:
      tags:
      - Category
      - delete
      summary: Delete Category by id
      description: Delete a Category object by specifying its id
      operationId: removeCategory
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: Category deleted
        "400":
          description: Id type mismatch
        "404":
          description: Category not found
        "409":
          description: Data integrity violation

  /api/v1/category/book-count:
    get:
      tags:
        - Category
        - get-all
      summary: Retrieve all categories with book count
      description: Retrieve all Category objects. The response is a list of Category names with the associated book count
        objects
      operationId: getAllCategoriesWithBookCount
      parameters:
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/AscParam'
        - $ref: '#/components/parameters/SortByParam'
      responses:
        "200":
          description: Retrieved all Categories
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageCategory"

  /api/v1/category/only-class:
    get:
      tags:
        - Category
        - get-all
      summary: Retrieve all categories with book lent to students belonging to only one class
      description: Retrieve all categories with book lent to students belonging to only one class
      operationId: getCategoriesOnlyClass
      parameters:
        - name: targetClass
          in: query
          required: true
          schema:
            type: string
        - $ref: '#/components/parameters/PageParam'
        - $ref: '#/components/parameters/SizeParam'
        - $ref: '#/components/parameters/AscParam'
        - $ref: '#/components/parameters/SortByParam'
      responses:
        "200":
          description: Retrieved all Categories
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PageCategory"
        "400":
          description: id type mismatch


components:
  schemas:
    Card:
      type: object
      properties:
        id:
          type: integer
          format: int64
        releaseDate:
          type: string
          format: date
    Student:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        surname:
          type: string
        schoolClass:
          type: string
        email:
          type: string
        Card:
          $ref: "#/components/schemas/Card"
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        books:
          type: array
          items:
            $ref: "#/components/schemas/Book"
    Book:
      type: object
      properties:
        id:
          type: integer
          format: int64
        year:
          type: integer
          format: int32
        category:
          $ref: "#/components/schemas/Category"
        title:
          type: string
        author:
          type: string
    Loan:
      type: object
      properties:
        id:
          type: integer
          format: int64
        startDate:
          type: string
          format: date
        endDate:
          type: string
          format: date
        student:
          $ref: "#/components/schemas/Student"
        Book:
          $ref: "#/components/schemas/Book"
    Course:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        students:
          type: array
          items:
            $ref: "#/components/schemas/Student"
          uniqueItems: true
    IdStudentBookDTO:
      type: object
      properties:
        idStudent:
          type: integer
          example: 5
        idBook:
          type: integer
          example: 7
      required:
        - idStudent
        - idBook
    CategoryBookCountDTO:
      type: object
      properties:
        categoryName:
          type: String
          example: Romanzo
        bookCount:
          type: integer
          example: 7
      required:
        - categoryName
        - bookCount
    NameSurnameLoansDTO:
      type: object
      properties:
        name:
          type: string
          example: Luca
        surname:
          type: string
          example: rossi
        loans:
          type: integer
          example: 7
      required:
        - name
        - surname
        - loans
    StudentStatsDTO:
      type: object
      properties:
        totalLoans:
          type: integer
          example: 7
        currentLoans:
          type: integer
          example: 7
        lastDate:
          type: string
          format: date
          example: 2024-11-11
        favouriteCategory:
          $ref: '#/components/schemas/Category'
      required:
        - favouriteCategory
        - lastDate
        - totalLoans
        - currentLoans

    PageStudent:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Student'
        totalElements:
          type: integer
        totalPages:
          type: integer
        size:
          type: integer
        number:
          type: integer
    PageBook:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Book'
        totalElements:
          type: integer
        totalPages:
          type: integer
        size:
          type: integer
        number:
          type: integer
    PageCard:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Card'
        totalElements:
          type: integer
        totalPages:
          type: integer
        size:
          type: integer
        number:
          type: integer
    PageLoan:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Loan'
        totalElements:
          type: integer
        totalPages:
          type: integer
        size:
          type: integer
        number:
          type: integer
    PageCourse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Course'
        totalElements:
          type: integer
        totalPages:
          type: integerdate
        size:
          type: integer
        number:
          type: integer
    PageCategory:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/Category'
        totalElements:
          type: integer
        totalPages:
          type: integer
        size:
          type: integer
        number:
          type: integer
    PageNameSurnameLoansDTO:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/NameSurnameLoansDTO'
        totalElements:
          type: integer
        totalPages:
          type: integer
        size:
          type: integer
        number:
          type: integer

  parameters:
    PageParam:
      name: page
      in: query
      required: false
      schema:
        type: integer
        default: 0
    SizeParam:
      name: size
      in: query
      required: false
      schema:
        type: integer
        default: 5
    AscParam:
      name: ascending
      in: query
      required: false
      schema:
        type: boolean
        default: true
    SortByParam:
      name: sortBy
      in: query
      required: false
      schema:
        type: string
        default: id

